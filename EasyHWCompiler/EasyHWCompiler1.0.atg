#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <string.h>
#include <list>
#include <map>
#include <set>
#include <functional>
#include "Variable.h";
#include "Componente.h";
#include "Cuadruplo.h";
using namespace std;

//-------------------------------------------------------------------Cubo Semantico y Funciones-----------------------------------------------------------------------------

const int cubosem[12][5][5] = 
{
{{1, 2, 13, 4, 5}, {2, 2, 13, 5, 5}, {13, 13, 3, 13, 13}, {4, 5, 13, 4, 5}, {5, 5, 13, 5, 5}}, //+
{{1, 2, 13, 4, 5}, {2, 2, 13, 5, 5}, {13, 13, 13, 13, 13}, {4, 5, 13, 4, 5}, {5, 5, 13, 5, 5}}, //-
{{1, 2, 13, 4, 5}, {2, 2, 13, 5, 5}, {13, 13, 13, 13, 13}, {4, 5, 13, 4, 5}, {5, 5, 13, 5, 5}}, //*
{{2, 2, 13, 5, 5}, {2, 2, 13, 5, 5}, {13, 13, 13, 13, 13}, {5, 5, 13, 5, 5}, {5, 5, 13, 5, 5}}, // /
{{1, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //AND 
{{1, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //OR 
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //<
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //>
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //!=
{{1, 1, 13, 13, 13}, {2, 2, 13, 13, 13}, {13, 13, 3, 13, 13}, {13, 13, 13, 4, 4}, {13, 13, 13, 5, 5}}, // <-
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //<=
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}//>=
};



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

COMPILER EASYHW

typedef map <int, Variable*> tablaVars;
typedef map <int, tablaVars*> tablaProcs;
typedef map <int, Componente*> tablaHardware;

int buscaCubo(wstring op, int operando1, int operando2)
{
  int oper;
  int aprob;
  
  if(op == L"+")
  {
	oper = 1;
  }
  else if (op == L"-")
  {
	oper = 2;
  }
  else if (op == L"*")
  {
	oper = 3;
  }
  else if (op == L"/")
  {
	oper = 4;
  }
  else if (op == L"Y")
  {
	oper = 5;
  }
  else if (op == L"O")
  {
	oper = 6;
  }
  else if (op == L"<")
  {
	oper = 7;
  }
  else if (op == L">")
  {
	oper = 8;
  }
  else if (op == L"!=")
  {
	oper = 9;
  }
  else if (op == L"=")
  {
	oper = 10;
  }
  else if (op == L"<=")
  {
	oper = 11;
  }
  else if (op == L">=")
  {
	oper = 12;
  }
  else if (op == L"NO")
  {
	oper = 13;
  } 

   aprob = cubosem[oper][operando1][operando2];
   return aprob;
}


//-----------------------------------------------------Declaracion de Variables Globales para el Programa-------------------------------------------------------------------
int myKey, procKey, varKey, hwKey, contRepeat, HWtype, VARtype;
bool pantallaOcupada;
wstring nombreProc, nombreVariable, nombreComponente;
wstring lastToken, nextToken, varScope;
hash <wstring> wstr_hash;
tablaVars *ptrTVars;
tablaProcs *ptrTProcs;
tablaHardware *ptrTHW;
Variable *ptrVariable;
Componente *ptrComponente;
map <int, void*>::iterator it;
map <int, void*> tablaScope;
set <wstring> globalPinSet;
int direccion, revTipo;
list <Cuadruplo> tcuadruplos;
stack <wstring> POperadores, POperandos;
stack <int> PTipos; 
stack<long double>PSaltos;
wstring operador, operando1, operando2, destino;
wstring idt; // ID temporal
wstring signoEntero;
// Variables 
int operandoT1, operandoT2;
// Temporal para el estatuto "while"
int auxTipo;
// Variables para crear temporales
long double contT;
wstring strTemp;
bool compilacionExitosa;
// Variables para estatuto "if"
long double contCuad;
long double saltoFalso;
long double saltoSino;
list<Cuadruplo>::iterator iteC;
// Variables para estatutos ciclicos
long double finM;
long double finH;
int tipoVeces;
wstring varVeces;
//Variables para Expresiones
int tipoID;
int destinoT;
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CHARACTERS
	lm = 'a'..'z'.
	lM = 'A'..'Z'.
	dig	= "0123456789".
	str = ANY.
		
TOKENS
	ID = lm{lM|lm|dig}.
	ENTERO = dig{dig}.
	DECIMAL = dig{dig}"."dig{dig}.
	FRASE = '\"' str '\"'.
	LETRA = "'"(lm|lM)"'".
	ENDL = '\n'.
	HMOTOR = "." ("retraso"|"velocidad"|"direccion").
	HSENSOR = "." "lectura".
	HLED = "." "encendido".
	HPANTALLA = "." "imprime".
	HSERVO = "." ("angulo"|"rapidez").
	HBOTON = "." "estado".
	PINANALOG =  "A"{dig}.
	

COMMENTS FROM "/*" TO "*/" NESTED

IGNORE '\r'

PRODUCTIONS

//-----------------------------------------------------------Seccion de Declaracion de Variables y Funciones----------------------------------------------------------------

//....................................................................CONFIGURACION DE HARDWARE.............................................................................
	EASYHW = (.	
				compilacionExitosa = true;
				contCuad = 1; //Contador de cuadruplos
				contT = 1;
				strTemp =L"t";
				//Seccion para dar de alta los campos Hardware, Global y Local en la tabla de Scopes
				varScope = L"Hardware";
				myKey = wstr_hash(varScope);
				tablaScope.insert(pair <int, void*> (myKey, new tablaHardware));
				varScope = L"Global";
				myKey = wstr_hash(varScope);
				tablaScope.insert(pair <int, void*> (myKey, new tablaVars));
				varScope = L"Local";
				myKey = wstr_hash(varScope);
				tablaScope.insert(pair <int, void*> (myKey, new tablaProcs));
				//Rellenado del setGlobal de pines para incluir los pines estaticos de la pantalla
				pantallaOcupada = false;				
			.) 
			"CONFIG" (.varScope = L"Hardware";.) ENDL "{" ENDL CONFIGURACION  "}" 
			(.
			
				cout << "Variables Hardware -- " << ptrTHW -> size() << endl;
			
			.){ENDL} 
			"VARG" (.varScope = L"Global";.) ENDL "{" ENDL [VARIABLES] "}" 
			(. 
			
				ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
				cout << "Variables Globales -- " << ptrTVars -> size() << endl;
			
			.){ENDL} 
			"FUNCIONES" (.varScope = L"Local"; .) ENDL "{" ENDL [FUNCIONES] "}"
			(.
				
				ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
				cout << "Funciones -- " << ptrTProcs -> size() << endl;
			
			.){ENDL} 
			"PROGRAMA" BLOQUE EOF.	
	
	CONFIGURACION = COMPONENTE ID 
					(. 
						nombreComponente = (wstring) t -> val;
						hwKey = wstr_hash(nombreComponente);
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(varScope)) -> second;
						contRepeat = ptrTHW -> count(hwKey);
						if(contRepeat == 0)
						{
							//Si el id no esta repetido se agrega a la tabla de hardware
							ptrTHW -> insert(pair <int, Componente*> (hwKey, new Componente));
							ptrComponente = (Componente*) ptrTHW -> find(hwKey) -> second;
							ptrComponente -> setNombre(nombreComponente);
						}
						else
						{
							//Si el id ya esta asignado se marca error de variable ya definida
							wcout << L"El componente " << nombreComponente << L" ya esta definido" << endl; 
						}
					.)
					[PUERTOS] ENDL [CONFIGURACION].
					
	COMPONENTE = "motor" (.HWtype = 1;.) 
				| "servo"(.HWtype = 1;.) 
				| "pantalla"
				(.
					if(!pantallaOcupada)
					{
						HWtype = 3; 
						pantallaOcupada = true;
						globalPinSet.insert(L"12");
						globalPinSet.insert(L"11");
						globalPinSet.insert(L"5");
						globalPinSet.insert(L"4");
						globalPinSet.insert(L"3");
						globalPinSet.insert(L"2");	
					}
					else
					{
						cout << "Recuerda que solo puedes utilizar una Pantalla, y que no puedes hacer uso de los pines 12, 11, 5, 4, 3, 2" << 
						" si es que planeas utilizar la Pantalla en tu robot" << endl;
					}
				.) 
				| "led" (. HWtype = 1; .) 
				| "boton" (. HWtype = 1;.) 
				| "sensor" (. HWtype = 2; .).
	PUERTOS = "pin"  (ENTERO | PINANALOG) 
			(. 
				//Seccion para asignar los pines a cada componente de HW
				lastToken = (wstring) t -> val;
				contRepeat = globalPinSet.count(lastToken);
				if(contRepeat == 0)
				{
					globalPinSet.insert(lastToken);
					ptrComponente -> setPin(lastToken);
				}
				else
				{
					wcout << L"El pin " << lastToken << L" ya esta siendo utilizado" << endl;
				}
				
			.).
			
			
			
//....................................................................VARIABLES Y FUNCIONES.................................................................................
	VARIABLES = DECLARACIONES ENDL [VARIABLES].
	DECLARACIONES = SIMPLE | ARREGLO.
	SIMPLE = TIPO ID
			(.
				nombreVariable = (wstring) t -> val;
				varKey = wstr_hash(nombreVariable);
				//-----------------------Si nos encontramos en la seccion de declaraciones GLOBALES se hace lo siguiente-------------------------------------------
				if(varScope == L"Global")
				{
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat == 0)
					{
						
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(L"Hardware")) -> second;
						contRepeat = ptrTHW -> count(varKey);
						if(contRepeat == 0)
						{
							ptrTVars -> insert(pair <int, Variable*> (varKey, new Variable));
							ptrVariable = (Variable*) ptrTVars -> find(varKey) -> second;
							ptrVariable -> setNombre(nombreVariable);
							ptrVariable -> setTipo(VARtype);
						}
						else
						{
							wcout << L"La variable " << nombreVariable << L" ya esta definida en la seccion de HARDWARE" << endl;
						}					
					}
					else
					{
						wcout << L"La variable " << nombreVariable << L" ya esta definida en la seccion de GLOBALES" << endl;
					}					
				}
				//-----------------------Si nos encontramos en la seccion de declaraciones LOCALES se hace lo siguiente---------------------------------------------
				else if(varScope == L"Local")
				{
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global"))->second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat == 0)
					{
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(L"Hardware")) -> second;
						contRepeat = ptrTHW -> count(varKey);
						if(contRepeat == 0)
						{
							ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
							ptrTVars = (tablaVars*) ptrTProcs -> find(procKey) -> second;
							contRepeat = ptrTVars -> count(varKey);
							if(contRepeat == 0)
							{
								ptrTVars -> insert(pair <int, Variable*> (varKey, new Variable));
								ptrVariable = (Variable*) ptrTVars -> find(varKey) -> second;
								ptrVariable -> setNombre(nombreVariable);
								ptrVariable -> setTipo(VARtype);
							}
							else
							{
								wcout << L"La variable " << nombreVariable << L" ya se encuentra definida en la funcion " << nombreProc << endl;
							}
						}
						else
						{
							wcout << L"La variable " << nombreVariable << L" ya esta definida en la seccion de HARDWARE" << endl;
						}					
					}
					else
					{
						wcout << L"La variable " << nombreVariable << L" ya esta definida en la seccion de GLOBALES" << endl;
					}				
				}
			.).
	ARREGLO = TIPOA ID
			(.
				nombreVariable = (wstring)t -> val;
				varKey = wstr_hash(nombreVariable);
				//---------------Si nos encontramos en la seccion de declaraciones GLOBALES se hace lo siguiente---------------------------------------------
				if(varScope == L"Global")
				{
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat == 0)
					{
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(L"Hardware")) -> second;
						contRepeat = ptrTHW -> count(varKey);
						if(contRepeat == 0)
						{
							ptrTVars -> insert(pair<int, Variable*>(varKey, new Variable));
							ptrVariable = (Variable*) ptrTVars -> find(varKey) -> second;
							ptrVariable -> setNombre(nombreVariable);
							ptrVariable -> setTipo(VARtype);
						}
						else
						{
							wcout << L"La variable " << nombreVariable << L" ya esta definida en la seccion de HARDWARE" << endl;
						}					
					}
					else
					{
						wcout << L"La variable " << nombreVariable << L" ya esta definida en la seccion de GLOBALES" << endl;
					}					
				}
				//------------------------Si nos encontramos en la seccion de declaraciones LOCALES se hace lo siguiente--------------------------------------
				else if(varScope == L"Local")
				{
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat == 0)
					{
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(L"Hardware")) -> second;
						contRepeat = ptrTHW -> count(varKey);
						if(contRepeat == 0)
						{
							ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
							ptrTVars = (tablaVars*) ptrTProcs -> find(procKey) -> second;
							contRepeat = ptrTVars -> count(varKey);
							if(contRepeat == 0)
							{
								ptrTVars -> insert(pair<int, Variable*>(varKey, new Variable));
								ptrVariable = (Variable*) ptrTVars -> find(varKey) -> second;
								ptrVariable -> setNombre(nombreVariable);
								ptrVariable -> setTipo(VARtype);
							}
							else
							{
								wcout << L"La variable " << nombreVariable << L" ya se encuentra definida en la funcion " << nombreProc << endl;
							}
						}
						else
						{
							wcout << L"La variable " << nombreVariable << L" ya esta definida en la seccion de HARDWARE" << endl;
						}					
					}
					else
					{
						wcout << L"La variable " << nombreVariable << L" ya esta definida en la seccion de GLOBALES" << endl;
					}							
				}
			.)
			"espacios" ENTERO.
	TIPO = "entero" (.VARtype = 1;.) | "decimal" (.VARtype = 2;.) | "frase" (.VARtype = 3;.).
	TIPOA = "enteroA" (.VARtype = 4;.) | "decimalA"(.VARtype = 5;.).				
	PARAMETROS =  SIMPLE ["," PARAMETROS].	
	FUNCIONES = FUNC [FUNCIONES].
	FUNC = 	ID 
			(.
				//Seccion que agrega a la tabla de procedimientos cada una de las funciones
				nombreProc = (wstring)t -> val;
				procKey = wstr_hash(nombreProc);
				ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second; 		
				contRepeat = ptrTProcs -> count(procKey);
				if(contRepeat == 0)
				{
					ptrTProcs -> insert(pair<int, tablaVars*>(procKey, new tablaVars));				
				}
				else
				{
					wcout << L"La funcion " << nombreProc << L" ya se encuentra definida" << endl;
				}
			.)
			"(" [PARAMETROS] ")" ENDL [FUNCVARS] BLOQUE.
	FUNCVARS = "VARF" (.varScope = L"Local";.) ENDL "-" ENDL VARIABLES "-".
	
	//-----------------------------------------------------Seccion de Estatutos, Expresiones, etc.------------------------------------------------------------
	BLOQUE = ENDL "{" ENDL [ESTATUTOS] "}" {ENDL}.
	ESTATUTOS =  ("condicion" CONDICION | "ciclo" CICLOS | "llamar" LLFUNC | "asignar" ASIGN) [ESTATUTOS] .
	
	//----------------------------------------------------------------ESTATUTOS-------------------------------------------------------------------------------
	//............................................................Seccion de CONDICION........................................................................
	CONDICION = "si" "(" EXPRESION ")" 
				(.
					if(PTipos.top() != 1)
					{
						PTipos.pop();
						compilacionExitosa = false;
						wcout << L"Expresion en la linea " << t->line << L" tiene que ser entera" << endl;
					}
					else
					{
						operando1 = POperandos.top();
						POperandos.pop();
						tcuadruplos.push_back(*(new Cuadruplo(L"saltoIF", operando1, L"", L"")));
						PSaltos.push(contCuad);
						contCuad++;
					}
					/*
					aux = PTipos.pop()
					if(aux <> int) compilacionExitosa = false;
					resul de pila de operandos
					goto falso resultado ___
					Push pila de saltos
					*/
				
				.)BLOQUE ["sino"
				(.
					saltoFalso = PSaltos.top();
					PSaltos.pop();
					iteC = tcuadruplos.begin();
					for(int i = 0; i < saltoFalso; i++)
					{
						iteC++;
					}
					iteC->setDestino(to_wstring(contCuad));
					tcuadruplos.push_back(*(new Cuadruplo (L"saltoELSE", L"", L"", L"")));
					PSaltos.push(contCuad);
					contCuad++;					
					/*
					Generar      goto _______
					sacar falso de pila-de-saltos
					rellenar (rellenar falso, cont)
					PUSH pila-de-saltos (cont - 1)
					*/
				.)
				BLOQUE
				(.
					saltoSino = PSaltos.top();
					PSaltos.pop();
					iteC = tcuadruplos.begin();
					for(int i = 0; i < saltoSino; i++)
					{
						iteC++;
					}
					iteC->setDestino(to_wstring(contCuad));
					/*
					Sacar fin de pila-de-saltos
					rellenar (fin, cont)
					*/
				.)
				].
	//.........................................................................................................................................................
	
	//...............................................................Seccion de CICLOS......................................................................
	CICLOS = MIENTRAS | HAZ.
	MIENTRAS = "mientras" 
				(.
					PSaltos.push(contCuad);/*meter cont en PSaltos*/
				.)
				"(" EXPRESION ")" "haz" 
				(.
					if(PTipos.top() != 1)
					{
						PTipos.pop();
						compilacionExitosa = false;
						wcout << L"Expresion en la linea " << t -> line << L" tiene que ser entera" << endl;
					}
					else
					{
						operando1 = POperandos.top();
						POperandos.pop();
						tcuadruplos.push_back(*(new Cuadruplo (L"falsoM", operando1, L"", L"")));
						PSaltos.push(contCuad);
						contCuad++;
					}
					/*
					inicioM finM
					Sacar aux de PTipos
					if(aux <> bool) compilacionExitosa = true;
					else{
					Sacar resultado de PilaOperandos
					Generar    gotofalso   resultado  ______
					PUSH Psaltos (cont-1)
					}
					*/
				.)
				BLOQUE
				(.
					finM = PSaltos.top();
					PSaltos.pop();
					iteC = tcuadruplos.begin();
					for(int i = 0; i < finM; i++)
					{
						iteC++;
					}
					iteC->setDestino(to_wstring(contCuad));
					tcuadruplos.push_back(*(new Cuadruplo (L"regresaM", L"", L"", to_wstring(PSaltos.top()))));
					PSaltos.pop();
					contCuad++;
					
					/*
					Sacar falso de PSaltos. 
					Sacar retorno de PSaltos
					Generar goto retorno
					rellenar (falso, cont)
					*/
				.).
				
	VECES = ENTERO (.tipoVeces = 1;.)| ID 
				(.
					// Corroborar el tipo de ID
					nombreVariable = (wstring) t -> val;
					varKey = wstr_hash(nombreVariable);
					
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat != 0)
					{
						ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
						tipoVeces = ptrVariable->getTipo();								
					}
					else
					{
						ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
						ptrTVars = (tablaVars*) ptrTProcs -> find(procKey) -> second;
						contRepeat = ptrTVars -> count(varKey);
						if(contRepeat != 0)
						{
							ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
							tipoVeces = ptrVariable->getTipo();
						}
						else
						{
							wcout << L"La variable no se encuentra definida en el programa" << endl;
						}
					}							
										
				.).
				
	HAZ = 	"haz" "(" VECES 
				(.
					varVeces = lastToken;
					if(tipoVeces != 1)
					{
						compilacionExitosa = false;
						wcout << L"Tiene que haber un valor entero en el estatuto \"veces\"" << endl;
					}
					else
					{
						tcuadruplos.push_back(*(new Cuadruplo(L"inicioHAZ", varVeces, L"", L"")));
						contCuad++;
					}
					/*
					varVeces = lastToken;
					buscatTipo == (int)
					*/
				.) 
			")" "veces" BLOQUE 
				(.
					tcuadruplos.push_back(*(new Cuadruplo(L"finHAZ", L"", L"", L"")));
					contCuad++;
				.). 
	//...........................................................................................................................................................
	
	//...................................................................LLAMADAS A FUNCIONES....................................................................
	LLFUNC = ID "("[PARAMETROS]")" ENDL.
		//FALTA VERIFICAR QUE LOS PARAMETROS CORRESPONDAN EN NUMERO Y EN TIPO
	
	//...........................................................................................................................................................
	
	//.....................................................................Seccion de ASIGNACION.................................................................
	ASIGN =  ID [VARHW] ASIGNACION.
	ASIGNACION = "<-" 
				(.
					POperadores.push(lastToken);// push(=) asignacion
				.)
				( EXPRESION | FRASE )  
				(.
					if(POperadores.top() == L"<-")
					{
						operador = POperadores.top();
						POperadores.pop();
						operandoT1 = PTipos.top();
						PTipos.pop();
						destinoT = PTipos.top();
						PTipos.pop();
						revTipo = buscaCubo(operador, destinoT, operandoT1);
						if(revTipo == 13)
						{
							compilacionExitosa = false;
							wcout << L"Tipos no compatibles en la linea " << t ->line  << endl;
						}
						else
						{
						    operando1 = POperandos.top();
							POperandos.pop();
							destino = POperandos.top();
							POperandos.pop();
							operando2 = L"";
							PTipos.push(revTipo);
							tcuadruplos.push_back(*(new Cuadruplo(operador, operando1, operando2, destino)));
						}
					}
				.) 
				ENDL.
	//...........................................................................................................................................................
	
	//--------------------------------------------------------------------------EXPRESIONES----------------------------------------------------------------------
	
	//......................................................................Seccion de EXPRESION.................................................................
	EXPRESION = EXP 
				(.
					if(POperadores.top() == L"<" || POperadores.top() == L">" || POperadores.top() == L"<=" || POperadores.top() == L">=" || POperadores.top() == L"!=" || POperadores.top() == L"=")
					{
						operador = POperadores.top();
						POperadores.pop();
						operandoT2 = PTipos.top();
						PTipos.pop();
						operandoT1 = PTipos.top();
						PTipos.pop();
						revTipo = buscaCubo(operador, operandoT1, operandoT2);
						if(revTipo == 13)
						{
							compilacionExitosa = false;	//Type mismatch
							wcout << L"Tipos no compatibles en la linea " << t -> line << endl;
						} 
						else
						{
							operando2 = POperandos.top();
							POperandos.pop();
							operando1 = POperandos.top();
							POperandos.pop();
							strTemp = L"t" + to_wstring(contT);
							destino = strTemp;
						    tcuadruplos.push_back(*(new Cuadruplo(operador, operando1, operando2, destino)));//Genera cuadruplo
						    POperandos.push(destino);
						    PTipos.push(revTipo);
						    contT++;
						}
					}
				.)
				[(">"|"<"|"<="|">="|"!="|"=") 
				(.
					POperadores.push(lastToken);/* push de operador */
				.)
				EXP].
	//.............................................................................................................................................................
	
	//................................................................Seccion de EXP...............................................................................
	EXP = TERMINO 
		(.
			if(POperadores.top() == L"+" || POperadores.top() == L"-" || POperadores.top() == L"Y" || POperadores.top() == L"O")
			{
				operador = POperadores.top();
				POperandos.pop();
				operandoT2 = PTipos.top();
				PTipos.pop();
				operandoT1 = PTipos.top();
				PTipos.pop();
				revTipo = buscaCubo(operador, operandoT1, operandoT2);/*revisar que los tipos sean permitidos*/
				if (revTipo == 13)
				{
					compilacionExitosa = false;
					wcout << L"Tipos no compatibles en la linea " << t ->line  << endl;
				}
				else
				{
				   operando2 = POperandos.top();
				   POperandos.pop();
				   operando1 = POperandos.top();
				   POperandos.pop();
				   strTemp = L"t" + to_wstring(contT);
				   destino = strTemp;
				   tcuadruplos.push_back(*(new Cuadruplo(operador, operando1, operando2, destino)));
				   POperandos.push(destino);
				   PTipos.push(revTipo);
				   contT++;
				}
			}
		.)
		[("+"|"-"|"Y"|"O") 
		(.
			POperadores.push(lastToken);/*meter operador a POperadores*/
		.)
		EXP].
	//.............................................................................................................................................................
	
	//..................................................................Seccion de TERMINO.........................................................................
	TERMINO = FACTOR 
			  (.
				  if(POperadores.top() == L"*" || POperadores.top() == L"/" || POperadores.top() == L"NO")
				   {
					   operador = POperadores.top();
					   POperadores.pop();
					   operandoT2 = PTipos.top();
					   PTipos.pop();
					   operandoT1 = PTipos.top();
					   PTipos.pop();
					   revTipo = buscaCubo(operador, operandoT1, operandoT2); /*revisar que los tipos sean permitidos*/
					   if (revTipo == 13)
					   {
							compilacionExitosa = false;
							wcout << L"Tipos no compatibles en la linea " << t->line << endl;
					   }
					   else
					   {
						   operando2 = POperandos.top();
						   POperandos.pop();
						   operando1 = POperandos.top();
						   POperandos.pop();
						   strTemp = L"t" + to_wstring(contT);
						   destino = strTemp;
						   tcuadruplos.push_back(*(new Cuadruplo(operador, operando1, operando2, destino)));//Genera cuadruplo
						   POperandos.push(destino);
						   PTipos.push(revTipo);
						   contT++;
						   
						}
				   }
			  .)
			  [("*"|"/"|"NO") 
			  (.
					POperadores.push(lastToken);/*meter operador a POperadores*/			  
			  .)
			  TERMINO].
	
	//.............................................................................................................................................................
	
	//...........................................................Seccion de FACTOR.................................................................................
	FACTOR = "(" 
			(.
				POperadores.push(L"(");/*6 meter fondo falso*/
			.)
			EXPRESION ")" 
			(.
				POperadores.pop();/*7 sacar fondo falso*/
			.)
			| 
			(.signoEntero = L"";.)
			(["-"(.signoEntero = lastToken;.)]
			CTE
			(.
				POperandos.push(signoEntero+lastToken);/*push constante*/			
			.)
			| ID 
			(.
				idt = lastToken;/*var aux para id*/
					
					// Corroborar el tipo de ID
					nombreVariable = (wstring) t -> val;
					varKey = wstr_hash(nombreVariable);
					
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat != 0)
					{
						ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
						tipoID = ptrVariable->getTipo();								
					}
					else
					{
						ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
						ptrTVars = (tablaVars*) ptrTProcs -> find(procKey) -> second;
						contRepeat = ptrTVars -> count(varKey);
						if(contRepeat != 0)
						{
							ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
							tipoID = ptrVariable->getTipo();
						}
						else
						{
							wcout << L"La variable no se encuentra definida en el programa" << endl;
						}
					}						
				
			.)
			["posicion" ENTERO 
			(.
				if(tipoID != 4 || tipoID != 5)
				{
					compilacionExitosa = false;
					wcout << "Error!! La variable declarada no es un arreglo " << endl;
				}
				else
				{
					idt = idt + L"[" + lastToken + L"]";
				}
			.)
			| VARHW
			(.
				ptrTHW = (tablaHardware*)tablaScope.find(wstr_hash(L"hardware")) -> second;/*apuntador a la tabla de variables de Hardware*/
				ptrComponente = (Componente*) ptrTHW->find(wstr_hash(idt))->second;/*encuentra la variable de hardware*/
				tipoID = ptrComponente->getTipo(lastToken);/*obtener el tipo del atributo de la variable de HW*/
				idt = idt + L"." + lastToken;/*cambiar tipo de token para que incluya HW*/
			.)
			]) 
			(.
				POperandos.push(idt); /*Push pila deoperandos*/
				PTipos.push(tipoID);/*Push pila de tipos*/
			.)
			.
	//.............................................................................................................................................................
	CTE = ENTERO | DECIMAL.
	VARHW = HMOTOR | HSENSOR | HLED | HPANTALLA | HSERVO | HBOTON.
	
END EASYHW.
