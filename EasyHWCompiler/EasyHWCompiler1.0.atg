#include <iostream>
#include <stdlib.h>
#include <conio.h>
#include <stdio.h>
#include <string>
#include <string.h>
#include <list>
#include <map>
#include <set>
#include <functional>
#include "Variable.h";
#include "Componente.h";
#include "Cuadruplo.h";
#include "Parametro.h";
using namespace std;

//-------------------------------------------------------------------Cubo Semantico y Funciones-----------------------------------------------------------------------------

const int cubosem[13][5][5] = 
{
{{1, 2, 13, 4, 5}, {2, 2, 13, 5, 5}, {13, 13, 13, 13, 13}, {4, 5, 13, 4, 5}, {5, 5, 13, 5, 5}}, //+
{{1, 2, 13, 4, 5}, {2, 2, 13, 5, 5}, {13, 13, 13, 13, 13}, {4, 5, 13, 4, 5}, {5, 5, 13, 5, 5}}, //-
{{1, 2, 13, 4, 5}, {2, 2, 13, 5, 5}, {13, 13, 13, 13, 13}, {4, 5, 13, 4, 5}, {5, 5, 13, 5, 5}}, //*
{{2, 2, 13, 5, 5}, {2, 2, 13, 5, 5}, {13, 13, 13, 13, 13}, {5, 5, 13, 5, 5}, {5, 5, 13, 5, 5}}, // /
{{1, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //AND 
{{1, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //OR 
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //<
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //>
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //!=
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}},//=
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}}, //<=
{{1, 1, 13, 13, 13}, {1, 1, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}, {13, 13, 13, 13, 13}},//>=
{{1, 1, 13, 13, 13}, {2, 2, 13, 13, 13}, {13, 13, 3, 13, 13}, {13, 13, 13, 4, 4}, {13, 13, 13, 5, 5}} // <-
};



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

COMPILER EASYHW

typedef map <wstring,void*> tablaDataFunc;
typedef map <int, Variable*> tablaVars;
typedef map <int, tablaDataFunc*> tablaProcs;
typedef map <int, Componente*> tablaHardware;
typedef list<Parametro*> Parametros;


int buscaCubo(wstring op, int opdo1, int opdo2)
{
  int oper;
  int aprob;
  
  if(op == L"+")
  {
	oper = 1;
  }
  else if (op == L"-")
  {
	oper = 2;
  }
  else if (op == L"*")
  {
	oper = 3;
  }
  else if (op == L"/")
  {
	oper = 4;
  }
  else if (op == L"Y")
  {
	oper = 5;
  }
  else if (op == L"O")
  {
	oper = 6;
  }
  else if (op == L"<")
  {
	oper = 7;
  }
  else if (op == L">")
  {
	oper = 8;
  }
  else if (op == L"!=")
  {
	oper = 9;
  }
  else if (op == L"=")
  {
	oper = 10;
  }
  else if (op == L"<=")
  {
	oper = 11;
  }
  else if (op == L">=")
  {
	oper = 12;
  }
  else if (op == L"<-")
  {
	oper = 13;
  } 
  else if (op == L"NO")
  {
	oper = 14;
  }

   aprob = cubosem[oper-1][opdo1-1][opdo2-1];
   return aprob;
}

void error()
{
	cout << "-----------------------ERRORES DE COMPILACION---------------------------" << endl;
	_getch();
	exit(1);	
}


//-----------------------------------------------------Declaracion de Variables Globales para el Programa-------------------------------------------------------------------
int myKey, procKey, varKey, hwKey, contRepeat, HWtype, VARtype;
bool pantallaOcupada;
wstring nombreProc, nombreVariable, nombreComponente;
wstring lastToken, nextToken, varScope;
wstring accionHWoPos;
wstring nombreFuncLl;
hash <wstring> wstr_hash;
tablaVars *ptrTVars;
tablaProcs *ptrTProcs;
tablaHardware *ptrTHW;
tablaDataFunc *ptrTDataF;
Variable *ptrVariable;
Componente *ptrComponente;
Parametros *ptrParametros;
list<Parametro*>::iterator itParams;
map <int, void*>::iterator it;
map <int, void*> tablaScope;
map <int,list<wstring>*> tLlParametros;
list<wstring>* ptrListaParametros;
long double contLlFunc;
set <wstring> globalPinSet;
int direccion, revTipo;
int arrCasillas,dimension;
map <int,Cuadruplo*> tCuadruplos;
map <int,Cuadruplo*>::iterator iteC;
stack <wstring> POperadores, POperandos;
stack <int> PTipos; 
stack<long double>PSaltos;
wstring operador, operando1, operando2, destino;
wstring idt; // ID temporal
wstring signoEntero;
// Variables 
int operandoT1, operandoT2;
// Temporal para el estatuto "while"
int auxTipo;
// Variables para crear temporales
long double contT;
wstring strTemp;
// Variables para estatuto "if"
long double contCuad;
long double saltoFalso;
long double saltoSino;
// Variables para estatutos ciclicos
long double finM;
long double finH;
int tipoVeces;
wstring varVeces;
//Variables para Expresiones
int tipoID;
int destinoT;
int tipoConstante;
bool declaredFunc;
bool llamandoFunc;
int contParams;
int tipoParametro;
int tipoArgumento;
int typeHW;
int tipoHW;
bool seEncontroID;
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CHARACTERS
	lm = 'a'..'z'.
	lM = 'A'..'Z'.
	dig	= "0123456789".
	str = ANY.
		
TOKENS
	ID = lm{lM|lm|dig}.
	ENTERO = dig{dig}.
	DECIMAL = dig{dig}"."dig{dig}.
	FRASE = '\"' {str} '\"'.
	LETRA = "'"(lm|lM)"'".
	ENDL = '\n'.
	HMOTOR = "." ("retraso"|"velocidad"|"direccion").
	HSENSOR = "." "lectura".
	HLED = "." "encendido".
	HPANTALLA = "." "imprime".
	HSERVO = "." ("angulo"|"rapidez").
	HBOTON = "." "estado".
	PINANALOG =  "A"{dig}.
	

COMMENTS FROM "/*" TO "*/" NESTED

IGNORE '\r'

PRODUCTIONS

//-----------------------------------------------------------Seccion de Declaracion de Variables y Funciones----------------------------------------------------------------

//....................................................................CONFIGURACION DE HARDWARE.............................................................................
	EASYHW = (.	
				wcout << L"-----------INICIO DE PROGRAMA-----------" << endl;
				contCuad = 1; //Contador de cuadruplos
				llamandoFunc = false;
				seEncontroID = false;
				contT = 1;
				contParams = 0;
				contLlFunc = 1;
				strTemp =L"t";
				//Seccion para dar de alta los campos Hardware, Global y Local en la tabla de Scopes
				varScope = L"Hardware";
				myKey = wstr_hash(varScope);
				tablaScope.insert(pair <int, void*> (myKey, new tablaHardware));
				varScope = L"Global";
				myKey = wstr_hash(varScope);
				tablaScope.insert(pair <int, void*> (myKey, new tablaVars));
				varScope = L"Local";
				myKey = wstr_hash(varScope);
				tablaScope.insert(pair <int, void*> (myKey, new tablaProcs));
				//Rellenado del setGlobal de pines para incluir los pines estaticos de la pantalla
				pantallaOcupada = false;			
				signoEntero = L"";
			.) 
			"CONFIG" (.varScope = L"Hardware"; cout << "-----------SECCION DE CONFIG-----------" << endl;.) ENDL "{" ENDL CONFIGURACION  "}" 
			(.
			
				cout << "Variables Hardware -- " << ptrTHW -> size() << endl;
			
			.){ENDL} 
			"VARG" (.varScope = L"Global"; cout << "-----------SECCION DE VARG-----------" << endl;.) ENDL "{" ENDL [VARIABLES] "}" 
			(. 
			
				ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
				cout << "Variables Globales -- " << ptrTVars -> size() << endl;
			
			.){ENDL} 
			"FUNCIONES" (.varScope = L"Local"; cout << "-----------SECCION DE FUNCIONES-----------" << endl; .) ENDL "{" ENDL [FUNC] "}"
			(.
				
				ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
				cout << "Funciones -- " << ptrTProcs -> size() << endl;
				llamandoFunc = true;
				
			.){ENDL} 
			"PROGRAMA" (. cout << "-----------INICIO DE MAIN-----------" << endl;.)BLOQUE
			(.
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Seccion Final y Maquina Virtual~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				cout << "El numero de cuadruplos generado es " << tCuadruplos.size() << endl;
				cout << "----------------------Cuadruplos-------------------" << endl;
				for(map<int,Cuadruplo*>::iterator it=tCuadruplos.begin();it!=tCuadruplos.end();++it)
				{ 	cout << it->first << " ";
					it->second->muestraCuadruplo();
				}
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			
			.)EOF.	
	
	CONFIGURACION = COMPONENTE ID 
					(. 
						nombreComponente = (wstring) t -> val;
						hwKey = wstr_hash(nombreComponente);
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(varScope)) -> second;
						contRepeat = ptrTHW -> count(hwKey);
						if(contRepeat == 0)
						{
							//Si el id no esta repetido se agrega a la tabla de hardware
							ptrTHW -> insert(pair <int, Componente*> (hwKey, new Componente));
							ptrComponente = (Componente*) ptrTHW -> find(hwKey) -> second;
							ptrComponente -> setNombre(nombreComponente);
							ptrComponente -> setTipoHW(typeHW);
						}
						else
						{
							//Si el id ya esta asignado se marca error de variable ya definida
							wcout << t->line << L":ERROR!! El componente " << nombreComponente << L" ya esta definido" << endl; 
							error();
						}
					.)
					[PUERTOS] ENDL [CONFIGURACION].
					
	COMPONENTE = "motor" (.HWtype = 1; typeHW = 1;.) 
				| "servo"(.HWtype = 1; typeHW = 2;.) 
				| "pantalla"
				(.
					if(!pantallaOcupada)
					{
						HWtype = 3; 
						typeHW = 3;
						pantallaOcupada = true;
						globalPinSet.insert(L"12");
						globalPinSet.insert(L"11");
						globalPinSet.insert(L"5");
						globalPinSet.insert(L"4");
						globalPinSet.insert(L"3");
						globalPinSet.insert(L"2");	
					}
					else
					{
						cout << t->line << ":ERROR!! Recuerda que solo puedes utilizar una Pantalla, y que no puedes hacer uso de los pines 12, 11, 5, 4, 3, 2" << 
						" si es que planeas utilizar la Pantalla en tu robot" << endl;
						error();
					}
				.) 
				| "led" (. HWtype = 1; typeHW = 4; .) 
				| "boton" (. HWtype = 1; typeHW = 5;.) 
				| "sensor" (. HWtype = 2; typeHW = 6;.).
	PUERTOS = "pin"  (ENTERO | PINANALOG) 
			(. 
				//Seccion para asignar los pines a cada componente de HW
				lastToken = (wstring) t -> val;
				contRepeat = globalPinSet.count(lastToken);
				if(contRepeat == 0)
				{
					globalPinSet.insert(lastToken);
					ptrComponente -> setPin(lastToken);
				}
				else
				{
					wcout << t->line  <<L":ERROR!! El pin " << lastToken << L" ya esta siendo utilizado" << endl;
					error();
				}
				
			.).
						
//....................................................................VARIABLES Y FUNCIONES.................................................................................
	VARIABLES = DECLARACIONES ENDL [VARIABLES].
	DECLARACIONES = SIMPLE | ARREGLO.
	SIMPLE = TIPO ID
			(.
				nombreVariable = (wstring) t -> val;
				varKey = wstr_hash(nombreVariable);
				//-----------------------Si nos encontramos en la seccion de declaraciones GLOBALES se hace lo siguiente-------------------------------------------
				if(varScope == L"Global")
				{
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat == 0)
					{
						
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(L"Hardware")) -> second;
						contRepeat = ptrTHW -> count(varKey);
						if(contRepeat == 0)
						{
							ptrTVars -> insert(pair <int, Variable*> (varKey, new Variable));
							ptrVariable = (Variable*) ptrTVars -> find(varKey) -> second;
							ptrVariable -> setNombre(nombreVariable);
							ptrVariable -> setTipo(VARtype);
						}
						else
						{
							wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya esta definida en la seccion de HARDWARE" << endl;
							error();
						}					
					}
					else
					{
						wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya esta definida en la seccion de GLOBALES" << endl;
						error();
					}					
				}
				//-----------------------Si nos encontramos en la seccion de declaraciones LOCALES se hace lo siguiente---------------------------------------------
				else if(varScope == L"Local")
				{
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global"))->second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat == 0)
					{
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(L"Hardware")) -> second;
						contRepeat = ptrTHW -> count(varKey);
						if(contRepeat == 0)
						{
							ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
							ptrTDataF = (tablaDataFunc*) ptrTProcs -> find(procKey) -> second;
							ptrTVars = (tablaVars*) ptrTDataF -> find (L"fVars") -> second;
							contRepeat = ptrTVars -> count(varKey);
							if(contRepeat == 0)
							{
								ptrTVars -> insert(pair <int, Variable*> (varKey, new Variable));
								ptrVariable = (Variable*) ptrTVars -> find(varKey) -> second;
								ptrVariable -> setNombre(nombreVariable);
								ptrVariable -> setTipo(VARtype);
							}
							else
							{
								wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya se encuentra definida en la funcion " << nombreProc << endl;
								error();
							}
						}
						else
						{
							wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya esta definida en la seccion de HARDWARE" << endl;
							error();
						}					
					}
					else
					{
						wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya esta definida en la seccion de GLOBALES" << endl;
						error();
					}				
				}
			.).
	ARREGLO = TIPOA ID
			(.
				nombreVariable = (wstring)t -> val;
			.)
			"espacios" ENTERO
			(.
				dimension = stoi((wstring)t->val);
				varKey = wstr_hash(nombreVariable);
				//---------------Si nos encontramos en la seccion de declaraciones GLOBALES se hace lo siguiente---------------------------------------------
				if(varScope == L"Global")
				{
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat == 0)
					{
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(L"Hardware")) -> second;
						contRepeat = ptrTHW -> count(varKey);
						if(contRepeat == 0)
						{
							ptrTVars -> insert(pair<int, Variable*>(varKey, new Variable));
							ptrVariable = (Variable*) ptrTVars -> find(varKey) -> second;
							ptrVariable -> setNombre(nombreVariable);
							ptrVariable -> setTipo(VARtype);
							ptrVariable -> setNumCasillas(dimension);
							cout << "La dimension del arreglo es: " << dimension << endl;
						}
						else
						{
							wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya esta definida en la seccion de HARDWARE" << endl;
							error();
						}					
					}
					else
					{
						wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya esta definida en la seccion de GLOBALES" << endl;
						error();
					}					
				}
				//------------------------Si nos encontramos en la seccion de declaraciones LOCALES se hace lo siguiente--------------------------------------
				else if(varScope == L"Local")
				{
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat == 0)
					{
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(L"Hardware")) -> second;
						contRepeat = ptrTHW -> count(varKey);
						if(contRepeat == 0)
						{
							ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
							ptrTDataF = (tablaDataFunc*) ptrTProcs -> find(procKey) -> second;
							ptrTVars = (tablaVars*) ptrTDataF -> find (L"fVars") -> second;
							contRepeat = ptrTVars -> count(varKey);
							if(contRepeat == 0)
							{
								ptrTVars -> insert(pair<int, Variable*>(varKey, new Variable));
								ptrVariable = (Variable*) ptrTVars -> find(varKey) -> second;
								ptrVariable -> setNombre(nombreVariable);
								ptrVariable -> setTipo(VARtype);
								ptrVariable -> setNumCasillas(dimension);
								cout << "La dimension del arreglo es: " << dimension << endl;
							}
							else
							{
								wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya se encuentra definida en la funcion " << nombreProc << endl;
								error();
							}
						}
						else
						{
							wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya esta definida en la seccion de HARDWARE" << endl;
							error();
						}					
					}
					else
					{
						wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya esta definida en la seccion de GLOBALES" << endl;
						error();
					}							
				}
			
			.).
	TIPO = "entero" (.VARtype = 1;.) | "decimal" (.VARtype = 2;.) | "frase" (.VARtype = 3;.).
	TIPOA = "enteroA" (.VARtype = 4;.) | "decimalA"(.VARtype = 5;.).				
	PARAMETROS =  TIPO ID
				(.
					//Seccion modificada para acoplar a que solo acepte parametros de tipo que no sean entero
					nombreVariable = (wstring) t -> val;
					varKey = wstr_hash(nombreVariable);
															
					//Cada parametro es agregado como una variable local a la funcion, y se verifica que no este definida 
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global"))->second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat == 0)
					{
						ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(L"Hardware")) -> second;
						contRepeat = ptrTHW -> count(varKey);
						if(contRepeat == 0)
						{
							ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
							ptrTDataF = (tablaDataFunc*) ptrTProcs -> find(procKey) -> second;
							ptrTVars = (tablaVars*) ptrTDataF -> find (L"fVars") -> second;
							contRepeat = ptrTVars -> count(varKey);
							if(contRepeat == 0)
							{
								ptrTVars -> insert(pair <int, Variable*> (varKey, new Variable));
								ptrVariable = (Variable*) ptrTVars -> find(varKey) -> second;
								ptrVariable -> setNombre(nombreVariable);
								ptrVariable -> setTipo(VARtype);
							}
							else
							{
								wcout << t->line << L":ERROR!!La variable " << nombreVariable << L" ya se encuentra definida en la funcion " << nombreProc << endl;
								error();
							}
						}
						else
						{
							wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya esta definida en la seccion de HARDWARE" << endl;
							error();
						}					
					}
					else
					{
						wcout << t->line << L":ERROR!! La variable " << nombreVariable << L" ya esta definida en la seccion de GLOBALES" << endl;
						error();
					}				
										
					//Seccion de Codigo Anterior para agregar parametros a la tabla de parametros de cada funcion
					ptrParametros = (Parametros*) ptrTDataF->find(L"fParams")->second;
					ptrParametros->push_back(new Parametro(nombreVariable,VARtype));
					for(list<Parametro*>::iterator it=ptrParametros->begin();it!=ptrParametros->end();++it)
					{
						wcout << "Nombre de Parametro: " << (*it)->getNombre() << endl;
						wcout << "Tipo de Parametro: " << (*it)->getTipo() << endl;
					}		
						
					
				.)
				["," PARAMETROS].	
	FUNC = 	ID 
			(.	
				//Seccion que agrega a la tabla de procedimientos cada una de las funciones
				nombreProc = (wstring)t -> val;
				procKey = wstr_hash(nombreProc);
				ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second; 		
				contRepeat = ptrTProcs -> count(procKey);
				if(contRepeat == 0)
				{
					declaredFunc = false;
					ptrTProcs -> insert(pair<int, tablaDataFunc*>(procKey, new tablaDataFunc));	
					ptrTDataF = (tablaDataFunc*)ptrTProcs->find(procKey)->second;
					ptrTDataF->insert(pair<wstring,void*>(L"fParams",new Parametros));
					ptrTDataF->insert(pair<wstring,void*>(L"fVars",new tablaVars));
					cout << "SE AGREGO UNA NUEVA FUNCION A LA TABLA DE PROCEDIMIENTOS" << endl;
					tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo(L"IniciaFunc",L"",L"",nombreProc)));
					contCuad++;
				}
				else
				{
					declaredFunc = true;
					wcout << t->line << L":ERROR!! La funcion " << nombreProc << L" ya se encuentra definida" << endl;
					error();
				}
			.)
			"(" [PARAMETROS] ")" ENDL [FUNCVARS] BLOQUE 
			(.
				if(!declaredFunc)
				{
				tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo(L"FinFunc",L"",L"",nombreProc)));
				contCuad++;
				}
			.) [FUNC].
	FUNCVARS = "VARF" (.varScope = L"Local";.) ENDL "-" ENDL VARIABLES "-".
	
	//-----------------------------------------------------Seccion de Estatutos, Expresiones, etc.------------------------------------------------------------
	BLOQUE = ENDL "{" ENDL [ESTATUTOS] "}" {ENDL}.
	ESTATUTOS =  ("condicion" (.cout << "CONDICION" << t->line <<endl;.)CONDICION 
				| "ciclo" (.cout << "CICLO" << t->line << endl;.) CICLOS 
				| "llamar" (.cout << "LLAMAR" << t->line << endl;.) LLFUNC ENDL
				| "asignar" (.cout << "ASIGNACION" << t->line << endl;.) ASIGN ENDL 
				) [ESTATUTOS].
	
	//----------------------------------------------------------------ESTATUTOS-------------------------------------------------------------------------------
	//............................................................Seccion de CONDICION........................................................................
	CONDICION = "si" "(" EXPRESION ")" 
				(.
					if(PTipos.top() != 1)
					{
						PTipos.pop();
						wcout << t->line << L":ERROR!! Expresion en la linea " << t->line << L" tiene que ser entera" << endl;
						error();
					}
					else
					{
						operando1 = POperandos.top();
						wcout << "Se esta a punto de sacar el operando " << POperandos.top() << endl;
						POperandos.pop();
						tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo(L"saltoIF", operando1, L"", L"")));
						wcout << "Se creo un nuevo cuadruplo. Contador --> " << contCuad << endl;
						//cout << "El tamaño de la pila de saltos actual --> " << PSaltos.size() << endl;
						//cout << "El tamaño de la pila de tipos actual --> " << PTipos.size() << endl;
						//cout << "El tamaño de la pila de operadores actual --> " << POperadores.size() << endl;
						//cout << "El tamaño de la pila de operandos actual --> " << POperandos.size() << endl;
						PSaltos.push(contCuad);
						contCuad++;
					}				
				.)BLOQUE
				(.
					saltoFalso = PSaltos.top();
					PSaltos.pop();
					tCuadruplos.find(saltoFalso)->second->setDestino(to_wstring(contCuad));
				.)				
				["sino"
				(.
					tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad++,new Cuadruplo(L"saltoELSE", L"", L"", L"")));
					cout << "Se creo un nuevo cuadruplo. Contador --> " << contCuad << endl;
					PSaltos.push(contCuad);
					contCuad++;					
				.)
				BLOQUE
				(.
					saltoSino = PSaltos.top();
					PSaltos.pop();
					tCuadruplos.find(saltoSino)->second->setDestino(to_wstring(contCuad));
				.)
				].
	//.........................................................................................................................................................
	
	//...............................................................Seccion de CICLOS......................................................................
	CICLOS = MIENTRAS | HAZ.
	MIENTRAS = "mientras" 
				(.
					PSaltos.push(contCuad);/*meter cont en PSaltos*/
				.)
				"(" EXPRESION ")" "haz" 
				(.
					if(PTipos.top() != 1)
					{
						PTipos.pop();
						wcout << t->line << L":ERROR!! Expresion en la linea " << t -> line << L" tiene que ser entera" << endl;
						error();
					}
					else
					{
						operando1 = POperandos.top();
						wcout << "Se esta a punto de sacar el operando " << POperandos.top() << endl;
						POperandos.pop();
						tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo (L"falsoM", operando1, L"", L"")));
						cout << "Se creo un nuevo cuadruplo. Contador --> " << contCuad << endl;
						PSaltos.push(contCuad);
						contCuad++;
					}
				.)
				BLOQUE
				(.
					finM = PSaltos.top();
					PSaltos.pop();
					tCuadruplos.find(finM)->second->setDestino(to_wstring(contCuad));
					tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo (L"regresaM", L"", L"", to_wstring(PSaltos.top()))));
					cout << "Se creo un nuevo cuadruplo. Contador --> " << contCuad << endl;
					PSaltos.pop();
					contCuad++;
				.).
				
	VECES = ENTERO (.tipoVeces = 1;.)| ID 
				(.
					// Corroborar el tipo de ID
					nombreVariable = (wstring) t -> val;
					varKey = wstr_hash(nombreVariable);
					
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat != 0)
					{
						ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
						tipoVeces = ptrVariable->getTipo();								
					}
					else
					{
						ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
						ptrTDataF = (tablaDataFunc*) ptrTProcs -> find(procKey) -> second;
						ptrTVars = (tablaVars*) ptrTDataF -> find (L"fVars") -> second;
						contRepeat = ptrTVars -> count(varKey);
						if(contRepeat != 0)
						{
							ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
							tipoVeces = ptrVariable->getTipo();
						}
						else
						{
							wcout << t->line << L":ERROR!! La variable no se encuentra definida en el programa" << endl;
							error();
						}
					}							
										
				.).
				
	HAZ = 	"haz" "(" VECES 
				(.
					varVeces = (wstring)t->val;
					if(tipoVeces != 1)
					{
						wcout << t->line << L":ERROR!! Tiene que haber un valor entero en el estatuto \"veces\"" << endl;
						error();
					}
					else
					{
						tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo(L"inicioHAZ", varVeces, L"", L"")));
						cout << "Se creo un nuevo cuadruplo. Contador --> " << contCuad << endl;
						contCuad++;
					}
				.) 
			")" "veces" BLOQUE 
				(.
					tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo(L"finHAZ", L"", L"", L"")));
					cout << "Se creo un nuevo cuadruplo. Contador --> " << contCuad << endl;
					contCuad++;
				.). 
	//...........................................................................................................................................................
	
	//...................................................................LLAMADAS A FUNCIONES....................................................................
	LLPARAMETROS = ID
				(.
						contParams++;
						if(contParams > ptrParametros->size())
						{
							cout << t->line << ":ERROR!! Hay mas argumentos que los parametros declarados en la funcion" << endl;
							error();
						}
						wcout << "ContParams: " << contParams << endl;
						nombreVariable = (wstring)t->val;
						varKey = wstr_hash(nombreVariable);
						wcout << "Variable parametro: " << nombreVariable << endl;
						//Necesario para buscar si esta declarada en Globales Nombre de variable 
						ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
						contRepeat = ptrTVars -> count(wstr_hash(nombreVariable));
						if(contRepeat != 0)
						{
							//Obtener el tipo de la variable global
							ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
							wcout << "El nombre de la variable a la que se les checara el tipo es: " << ptrVariable->getNombre() << endl;
							tipoParametro = ptrVariable->getTipo();
							wcout << "El tipo de " << nombreVariable << " es " << tipoParametro << endl;
							//Comparar con los tipos del mapa de Parametros
							wcout << "Argumento " << (*itParams)->getNombre() << endl;
							tipoArgumento = (*itParams)->getTipo();
							wcout << "Tipo de Argumento: " << tipoArgumento << endl;
							if(tipoParametro == tipoArgumento)
							{
									ptrListaParametros->push_back(nombreVariable);
									itParams++;
							}
							else
							{
								cout << t->line << ":ERROR!! El argumento no corresponde con el tipo del parametro" << endl;
								error();
							}
						}
						else
						{
							wcout << t->line << ":ERROR!! El parametro " << nombreVariable << " no esta declarado como variable" << endl;
							error();
							
						}			
				.) 
				["," LLPARAMETROS].
	
	LLFUNC = ID 
			(.
				
				nombreFuncLl = (wstring)t->val;
				procKey = wstr_hash(nombreFuncLl);
				ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second; 		
				contRepeat = ptrTProcs -> count(procKey);
				if(contRepeat != 0)
				{
					wcout << "Se esta llamando a " << nombreFuncLl << " y si esta definida" << endl;
					ptrTDataF = (tablaDataFunc*)ptrTProcs->find(procKey)->second;
					ptrParametros = (Parametros*) ptrTDataF->find(L"fParams")->second;
					itParams = ptrParametros->begin();					
				}
				else
				{
					wcout << t->line << ":ERROR!! La funcion " << nombreFuncLl << " no se encuentra declarada" << endl;
					error();
				}
			.)
			"("[
			(.
				ptrListaParametros = new list<wstring>;
			.)
			LLPARAMETROS]")"
			(.
				cout << "El numero de parametros de la funcion fue: " << ptrParametros->size() << endl;
				cout << "El numero de parametros recibido fue: " << contParams << endl;
				if(contParams != ptrParametros->size())
				{
					cout << t->line << ":ERROR!! Existen menos argumentos que los que necesita la funcion" << endl;
					error();
				}
				tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo(L"llamaFunc", to_wstring(contLlFunc), L"",nombreFuncLl)));
				tLlParametros.insert(pair<int,list<wstring>*>(contLlFunc,ptrListaParametros));
				contLlFunc++; 
				contParams = 0;
				
				
			.).	
	//...........................................................................................................................................................
	
	//.....................................................................Seccion de ASIGNACION.................................................................
	ASIGN =  ID 
			(.
					// Corroborar el tipo de ID
					nombreVariable = (wstring) t -> val;
					varKey = wstr_hash(nombreVariable);						
			.)
			[VARHW | "posicion" ENTERO] 
			(.
				accionHWoPos = (wstring) t->val;
				
				ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
				contRepeat = ptrTVars -> count(varKey);
				if(contRepeat != 0)
				{
					ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
					tipoID = ptrVariable->getTipo();
					if(tipoID == 4 || tipoID == 5)
					{
						arrCasillas = ptrVariable->getNumCasillas();
						if(arrCasillas < stoi(accionHWoPos) || stoi(accionHWoPos) < 1)
						{
							cout << t->line << ":ERROR!! Fuera de los limites del arreglo!!" << endl;
							error();
						}
						else
						{
							nombreVariable = nombreVariable + L"[" + accionHWoPos + L"]";
							if(tipoID==4)
								tipoID = 1;
							else
								tipoID = 2;
						}
						
						
					}
					wcout << "Se esta a punto de meter el operando ASIGN " << nombreVariable << endl;
					POperandos.push(nombreVariable);
					PTipos.push(tipoID);
					wcout << "Contenido despues del push de POperandos: " << POperandos.top() << endl;
					wcout << "La variable " << nombreVariable << " fue encontrada Global" << endl;
				}
				else
				{
					ptrTHW = (tablaHardware*) tablaScope.find(wstr_hash(L"Hardware")) -> second;
					contRepeat = ptrTHW -> count(varKey);
					if(contRepeat != 0)
					{
						ptrComponente = (Componente*) ptrTHW->find(varKey)->second;
						tipoID = ptrComponente->getTipo(accionHWoPos);
						wcout << "Se esta a punto de meter el operando ASIGN HW " << nombreVariable+accionHWoPos << endl;
						POperandos.push(nombreVariable + accionHWoPos);
						PTipos.push(tipoID);
						wcout << "La variable " << nombreVariable << " fue encontrada en HW" << endl;
					}
					else
					{
						ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
						ptrTDataF = (tablaDataFunc*) ptrTProcs -> find(procKey) -> second;
						ptrTVars = (tablaVars*) ptrTDataF -> find (L"fVars") -> second;
						contRepeat = ptrTVars -> count(varKey);
						if(contRepeat != 0)
						{
							ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
							tipoID = ptrVariable->getTipo();
							if(tipoID == 4 || tipoID == 5)
							{
								arrCasillas = ptrVariable->getNumCasillas();
								if(arrCasillas < stoi(accionHWoPos) || stoi(accionHWoPos) < 1)
								{
									cout << t->line << ":ERROR!! Fuera de los rangos del arreglo!!" << endl;
									error();
								}
								else
								{
									nombreVariable = nombreVariable + L"[" + accionHWoPos + L"]";
									if(tipoID==4)
										tipoID = 1;
									else
										tipoID = 2;
								}
							}
							wcout << "Se esta a punto de meter el operando ASIGN LOCAL" << nombreVariable << endl;
							POperandos.push(nombreVariable);
							PTipos.push(tipoID);
							wcout << "La variable " << nombreVariable << " fue encontrada Local" << endl;
						}
						else
						{
							wcout << t->line << L":ERROR!! La variable " << nombreVariable << " no se encuentra definida" << endl;
							error();
						}
					}		
				}
			.)
			ASIGNACION.
	ASIGNACION = "<-" 
				(.
					lastToken = (wstring)t->val;
					wcout << "Se agregara el siguiente operador: " << lastToken << endl;
					POperadores.push(lastToken);// push(=) asignacion
					wcout << "Se agrego " << lastToken << " exitosamente" << endl;
					
				.)
				( EXPRESION (.cout << "Me llego una expresion"<<endl; .)| FRASE (.cout << "Me llego una frase" << endl; lastToken = (wstring)t->val;POperandos.push(lastToken); PTipos.push(3);.) )  
				(.
				if(POperadores.size() != 0)
				 {
					if(POperadores.top() == L"<-")
					{
						cout << "Entramos al if de ASIGNACION" << endl;
						operador = POperadores.top();
						wcout << "Operador = " << POperadores.top() << endl;
						POperadores.pop();
						wcout << "Pop de Operadores Hecho!!" << endl;
						operandoT1 = PTipos.top();
						wcout << "OperandoT1 = " << PTipos.top() << endl;
						PTipos.pop();
						wcout << "Pop de Tipos Hecho!!" << endl;
						destinoT = PTipos.top();
						wcout << "Operando Destino = " << PTipos.top() << endl;
						PTipos.pop();
						revTipo = buscaCubo(operador, destinoT, operandoT1);
						if(revTipo == 13)
						{
							wcout << t->line << L":ERROR!! Tipos no compatibles en la linea " << t ->line  << endl;
							error();
						}
						else
						{
						    operando1 = POperandos.top();
							wcout << "Se esta a punto de sacar el operando " << POperandos.top() << endl;
							POperandos.pop();
							destino = POperandos.top();
							wcout << "Se esta a punto de sacar el operando " << POperandos.top() << endl;
							POperandos.pop();
							operando2 = L"";
							tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo(operador, operando1, operando2, destino)));
							cout << "Se creo un nuevo cuadruplo. Contador --> " << contCuad << endl;
							contCuad++;
						}
					}
				}
				.).
	//...........................................................................................................................................................
	
	//--------------------------------------------------------------------------EXPRESIONES----------------------------------------------------------------------
	
	//......................................................................Seccion de EXPRESION.................................................................
	EXPRESION = EXP 
				(.
				
				if(POperadores.size() != 0)
				 {
					wcout << "El top de POperadores en FACTOR es: " << POperadores.top();
					
					if(POperadores.top() == L"<" || POperadores.top() == L">" || POperadores.top() == L"<=" || POperadores.top() == L">=" || POperadores.top() == L"!=" || POperadores.top() == L"=")
					{
						cout << "Si encontre un <" << endl;
						operador = POperadores.top();
						POperadores.pop();
						operandoT2 = PTipos.top();
						PTipos.pop();
						operandoT1 = PTipos.top();
						PTipos.pop();
						revTipo = buscaCubo(operador, operandoT1, operandoT2);
						if(revTipo == 13)
						{
							wcout << t->line << L":ERROR!! Tipos no compatibles en la linea " << t -> line << endl;
							error();
						} 
						else
						{
							operando2 = POperandos.top();
							wcout << "Se esta a punto de sacar el operando2 EXPRESION " << POperandos.top() << endl;
							POperandos.pop();
							operando1 = POperandos.top();
							wcout << "Se esta a punto de sacar el operando1 EXPRESION" << POperandos.top() << endl;
							POperandos.pop();
							strTemp = L"t" + to_wstring(contT);
							destino = strTemp;
						    tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo(operador, operando1, operando2, destino)));//Genera cuadruplo
							cout << "Se creo un nuevo cuadruplo. Contador --> " << contCuad << endl;
							wcout << "Se esta a punto de meter el operando EXPRESION " << destino << endl;
						    POperandos.push(destino);
						    PTipos.push(revTipo);
							contCuad++;
						    contT++;
						}
					}
				}
				.)
				[(">"|"<"|"<="|">="|"!="|"=") 
				(.
					wcout << "Ohh mira me acaba de llegar algo de la seccion de < > <= etc" << endl;
					lastToken = (wstring)t->val;
					wcout << "Se agregara el siguiente operador: " << lastToken << endl;
					POperadores.push(lastToken);/* push de operador */
				.)
				EXPRESION].
	//.............................................................................................................................................................
	
	//................................................................Seccion de EXP...............................................................................
	EXP = TERMINO 
		(.
		 if(POperadores.size() != 0)
		{
			if(POperadores.top() == L"+" || POperadores.top() == L"-" || POperadores.top() == L"Y" || POperadores.top() == L"O")
			{
				operador = POperadores.top();
				wcout << "Se esta a punto de sacar el operador " << POperadores.top() << endl;
				POperadores.pop();
				operandoT2 = PTipos.top();
				PTipos.pop();
				cout << "El tipo de Operando2 es: " << operandoT2 << endl;
				operandoT1 = PTipos.top();
				PTipos.pop();
				cout << "El tipo de Operando1 es: " << operandoT1 << endl;
				revTipo = buscaCubo(operador, operandoT1, operandoT2);/*revisar que los tipos sean permitidos*/
				cout << "El tipo resulantes de Opdo1 y Opd2 es: " << revTipo << endl;
				if (revTipo == 13)
				{
					wcout << t->line << L":ERROR!! Tipos no compatibles en la linea " << t->line  << endl;
					error();
				}
				else
				{
				   operando2 = POperandos.top();
				   wcout << "Se esta a punto de sacar el operando2 EXP " << POperandos.top() << endl;
				   POperandos.pop();
				   operando1 = POperandos.top();
				   wcout << "Se esta a punto de sacar el operando1 EXP " << POperandos.top() << endl;
				   POperandos.pop();
				   strTemp = L"t" + to_wstring(contT);
				   destino = strTemp;
				   tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo(operador, operando1, operando2, destino)));
				   cout << "Se creo un nuevo cuadruplo. Contador --> " << contCuad << endl;
				   wcout << "Se esta a punto de meter el operando EXP" << destino << endl;
				   POperandos.push(destino);
				   PTipos.push(revTipo);
				   contCuad++;
				   contT++;
				}
			}
		}
		.)
		[("+"|"-"|"Y"|"O") 
		(.
			lastToken = (wstring)t->val;
			wcout << "Se agregara el siguiente operador: " << lastToken << endl;
			POperadores.push(lastToken);/*meter operador a POperadores*/
		.)
		EXP].
	//.............................................................................................................................................................
	
	//..................................................................Seccion de TERMINO.........................................................................
	TERMINO = FACTOR 
			  (.
				 if(POperadores.size() != 0)
				 {
				  if(POperadores.top() == L"*" || POperadores.top() == L"/" || POperadores.top() == L"NO")
				   {
					   operador = POperadores.top();
					   POperadores.pop();
					   operandoT2 = PTipos.top();
					   PTipos.pop();
					   operandoT1 = PTipos.top();
					   PTipos.pop();
					   revTipo = buscaCubo(operador, operandoT1, operandoT2); /*revisar que los tipos sean permitidos*/
					   if (revTipo == 13)
					   {
							wcout << t->line << L":ERROR!! Tipos no compatibles en la linea " << t->line << endl;
							error();
					   }
					   else
					   {
						   operando2 = POperandos.top();
						   wcout << "Se esta a punto de sacar el operando " << POperandos.top() << endl;
						   POperandos.pop();
						   operando1 = POperandos.top();
						   wcout << "Se esta a punto de sacar el operando " << POperandos.top() << endl;
						   POperandos.pop();
						   strTemp = L"t" + to_wstring(contT);
						   destino = strTemp;
						   tCuadruplos.insert(pair<int,Cuadruplo*>(contCuad,new Cuadruplo(operador, operando1, operando2, destino)));//Genera cuadruplo
						   wcout << "Se esta a punto de meter el operando TERMINO " << destino << endl;
						   POperandos.push(destino);
						   PTipos.push(revTipo);
						   contCuad++;
						   contT++;
						   
						}
				   }
				}
			  .)
			  [("*"|"/"|"NO") 
			  (.
					lastToken = (wstring)t->val;
					wcout << "Se agregara el siguiente operador: " << lastToken << endl;
					POperadores.push(lastToken);/*meter operador a POperadores*/			  
			  .)
			  TERMINO].
	
	//.............................................................................................................................................................
	
	//...........................................................Seccion de FACTOR.................................................................................
	FACTOR = "(" 
			(.
				POperadores.push(L"(");/*6 meter fondo falso*/
				wcout << "Se agrego fondo falso" << endl;
			.)
			EXPRESION ")" 
			(.
				POperadores.pop();/*7 sacar fondo falso*/
				wcout << "Se saco fondo falso" << endl;
			.)
			| 
			(["-"(.signoEntero = (wstring)t->val;.)]
			CTE
			(.
				lastToken = (wstring)t->val;
				tipoID = tipoConstante;
				idt = signoEntero + lastToken;
				signoEntero = L"";
			.)
			
			| 
			ID 
			(.
					idt = (wstring)t->val;/*var aux para id*/
					wcout << "IDT EN FACTOR ID/HW " << idt;
					
					// Corroborar el tipo de ID
					nombreVariable = (wstring) t -> val;
					varKey = wstr_hash(nombreVariable);
					
					ptrTVars = (tablaVars*) tablaScope.find(wstr_hash(L"Global")) -> second;
					contRepeat = ptrTVars -> count(varKey);
					if(contRepeat != 0)
					{
						ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
						tipoID = ptrVariable->getTipo();	
						wcout << "El tipo de la variable global es: " << tipoID << endl;
						seEncontroID = true;
						
					}
					else
					{
						ptrTProcs = (tablaProcs*) tablaScope.find(wstr_hash(L"Local")) -> second;
						ptrTDataF = (tablaDataFunc*) ptrTProcs -> find(procKey) -> second;
						ptrTVars = (tablaVars*) ptrTDataF -> find (L"fVars") -> second;
						contRepeat = ptrTVars -> count(varKey);
						if(contRepeat != 0)
						{
							ptrVariable = (Variable*) ptrTVars->find(varKey)->second;
							tipoID = ptrVariable->getTipo();
							seEncontroID = true;
							
						}
						else
						{
							ptrTHW = (tablaHardware*)tablaScope.find(wstr_hash(L"Hardware")) -> second;/*apuntador a la tabla de variables de Hardware*/
							ptrComponente = (Componente*) ptrTHW->find(wstr_hash(idt))->second;/*encuentra la variable de hardware*/
							contRepeat = ptrComponente->count(varKey);/*obtener el tipo del atributo de la variable de HW*/
							if(contRepeat != 0)
							{
								seEncontroID = true;
							}
							else
							{
								cout << t->line << ":ERROR!! La variable " << nombreVariable << " no esta declarada" << endl;
							}
						
						}
												
					}						
				
			.)
			["posicion" ENTERO 
			(.
				lastToken = (wstring)t->val;
								
				if(tipoID == 4 || tipoID == 5)
				{
					arrCasillas = ptrVariable->getNumCasillas();
					if(stoi(lastToken) <= arrCasillas && stoi(lastToken) > 0)
					{					
					idt = idt + L"[" + lastToken + L"]";
						
						if(tipoID==4)
							tipoID = 1;
						else
							tipoID = 2;
					}
					else
					{
						cout << t->line <<":ERROR!!! Fuera del rango del arreglo" << endl;
						error();
					}
				}
				else
				{
					wcout << t->line <<":ERROR!! La variable declarada no es un arreglo " << endl;
					error();
				}
			.)
			| VARHW
			(.
				lastToken = (wstring)t->val;
				
				ptrTHW = (tablaHardware*)tablaScope.find(wstr_hash(L"Hardware")) -> second;/*apuntador a la tabla de variables de Hardware*/
				ptrComponente = (Componente*) ptrTHW->find(wstr_hash(idt))->second;/*encuentra la variable de hardware*/
				tipoID = ptrComponente->getTipo(lastToken);/*obtener el tipo del atributo de la variable de HW*/
				idt = idt + lastToken;/*cambiar tipo de token para que incluya HW*/
			.)
			]) 
			(.
				wcout << "Se esta a punto de meter el operando FACTOR " << idt << endl;
				POperandos.push(idt); /*Push pila deoperandos*/
				wcout << "El top de POperandos en FACTOR es: " << POperandos.top();
				PTipos.push(tipoID);/*Push pila de tipos*/
				wcout << "El top de PTipos en FACTOR es: " << PTipos.top();
				seEncontroID = false;
				
			.).
	//.............................................................................................................................................................
	CTE = ENTERO (.tipoConstante = 1;.) | DECIMAL (.tipoConstante = 2;.).
	VARHW = HMOTOR 
			(.
				ptrTHW = (tablaHardware*)tablaScope.find(wstr_hash(L"Hardware")) -> second;/*apuntador a la tabla de variables de Hardware*/
				ptrComponente = (Componente*) ptrTHW->find(wstr_hash(idt))->second;/*encuentra la variable de hardware*/
				tipoHW = ptrComponente->getTipoHW(lastToken);/*obtener el tipo del atributo de la variable de HW*/
				if(tipoHW != 1)
				{
					cout << t->line << "ERROR!! El atributo " << (wstring)t->val << " no es valido para este componente" << endl;
					error();
				}
				
				
			.) 
		   | HSENSOR
			(.
				ptrTHW = (tablaHardware*)tablaScope.find(wstr_hash(L"Hardware")) -> second;/*apuntador a la tabla de variables de Hardware*/
				ptrComponente = (Componente*) ptrTHW->find(wstr_hash(idt))->second;/*encuentra la variable de hardware*/
				tipoHW = ptrComponente->getTipoHW(lastToken);/*obtener el tipo del atributo de la variable de HW*/
				if(tipoHW != 6)
				{
					cout << t->line << "ERROR!! El atributo " << (wstring)t->val << " no es valido para este componente" << endl;
					error();
				}
			.) 
		   | HLED
			(.
				ptrTHW = (tablaHardware*)tablaScope.find(wstr_hash(L"Hardware")) -> second;/*apuntador a la tabla de variables de Hardware*/
				ptrComponente = (Componente*) ptrTHW->find(wstr_hash(idt))->second;/*encuentra la variable de hardware*/
				tipoHW = ptrComponente->getTipoHW(lastToken);/*obtener el tipo del atributo de la variable de HW*/
				if(tipoHW != 4)
				{
					cout << t->line << "ERROR!! El atributo " << (wstring)t->val << " no es valido para este componente" << endl;
					error();
				}
			
			.) 
		   | HPANTALLA
			(.
				ptrTHW = (tablaHardware*)tablaScope.find(wstr_hash(L"Hardware")) -> second;/*apuntador a la tabla de variables de Hardware*/
				ptrComponente = (Componente*) ptrTHW->find(wstr_hash(idt))->second;/*encuentra la variable de hardware*/
				tipoHW = ptrComponente->getTipoHW(lastToken);/*obtener el tipo del atributo de la variable de HW*/
				if(tipoHW != 3)
				{
					cout << t->line << "ERROR!! El atributo " << (wstring)t->val << " no es valido para este componente" << endl;
					error();
				}
			
			.) 
		   | HSERVO
		   (.
				ptrTHW = (tablaHardware*)tablaScope.find(wstr_hash(L"Hardware")) -> second;/*apuntador a la tabla de variables de Hardware*/
				ptrComponente = (Componente*) ptrTHW->find(wstr_hash(idt))->second;/*encuentra la variable de hardware*/
				tipoHW = ptrComponente->getTipoHW(lastToken);/*obtener el tipo del atributo de la variable de HW*/
				if(tipoHW != 2)
				{
					cout << t->line << "ERROR!! El atributo " << (wstring)t->val << " no es valido para este componente" << endl;
					error();
				}
		   .) 
		   | HBOTON
		   (.
				ptrTHW = (tablaHardware*)tablaScope.find(wstr_hash(L"Hardware")) -> second;/*apuntador a la tabla de variables de Hardware*/
				ptrComponente = (Componente*) ptrTHW->find(wstr_hash(idt))->second;/*encuentra la variable de hardware*/
				tipoHW = ptrComponente->getTipoHW(lastToken);/*obtener el tipo del atributo de la variable de HW*/
				if(tipoHW != 5)
				{
					cout << t->line << "ERROR!! El atributo " << (wstring)t->val << " no es valido para este componente" << endl;
					error();
				}
		   
		   .).
	
END EASYHW.
